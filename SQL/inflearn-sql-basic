/* 
주석 처리

한 줄 -- 

여러 줄 
*/  


/*
-- DQL (Data Query Language) 질의어:
SELECT 데이터 꺼내오기

-- DML (Data Manipulation Language) 조작어:
INSERT 데이터 쌓기
UPDATE 데이터 수정
DELETE 데이터 삭제

4가지 기능

<코딩테스트>
- 프로그래머스
- 해커랭크
- Mode

<이론 강의 실습 사이트>
- w3schools
*/


SELECT * FROM Customers

-- * : Asterisk [아스타] 전체 컬럼 모든 데이터
-- FROM ~ : ~라는 테이블

SELECT CustoemrName, Address (컬럼)
FROM Customers

LIMIT 10 (상위 10개 레코드)


/*
Field = 컬럼 이름

예약어 = 대문자
나머지 문자 = 소문자
*/

SELECT *
FROM Customers
WHERE Country = 'Germany'


/* 
<비교연산자>

> : 크다
< : 작다
= : 같다
<> : 다르다
>= : 크거나 같다
<= : 작거나 같다


<논리연산자>

WHERE CustomerName < "B"
WHERE CustomerName < "B" AND Country = 'Germany'
WHERE CustomerName < "B" OR Country = 'Germany'
*/


-- LIKE 문자열 패턴 찾기

SELECT *
FROM Customers
WHERE country LIKE 'br%'

'%r%'

-- % : 와일드카드wildcard 어떤 것이 들어있어도 상관 없다


-- 비교연산자

SELECT *
FROM Customers
WHERE country IN ( 'Germany', 'France' )

WHERE country = 'Germany' OR country = 'France'



WHERE CustomerID BETWEEN 3 AND 5
-- (3과 5 포함)

WHERE customerID >=  3 AND customerID <= 5



-- 데이터가 비어 있는 부분

WHERE CustomerID IS NULL

-- = NULL (X)
-- NULL, NaN (Not a Number)

-- 반대 
IS NOT NULL



-- = LIKE 속도 차이
-- = 이 더 빠름. 

WHERE Country LIKE 'B_____'

-- _ : 한 글자 와일드카드, 문자 수 


/*
%, _ 가 포함된 데이터를 찾고 싶을 때!
\ 이스케이프, Backslash 역슬래시
: 예약어를 탈출한다 MySQL기준
*/

/*
PostgreSQL mssql, redshift 데이터베이스 인터프리터 종류
-> ex) redshift like % escape 구글링
*/


-- (가상 데이터)

WHERE discount LIKE '50\%'

WHERE discount LIKE '__\%' 두 자리수 할인율


/*
--중복값 없이 출력

SELECT DISTINCT 칼럼명
FROM 테이블명
WHERE 조건
*/



-- 데이터 정렬하기

SELECT *
FROM Customers
WHERE
ORDER BY customerid DESC

-- DESC : 내림차순
-- ASC : 오름차순(디폴트)

-- * 순서 중요!
-- 저장되어 있는 데이터의 순서를 바꾸지는 않음.
-- 데이터를 가져와서 보여줄 때에만 변경해서 보여준다.


SELECT *
FROM Products
WHERE price >= 20
ORDER BY price DESC


SELECT *
FROM Products
ORDER BY price DESC
LIMIT 1 --(최댓값 1개 출력)


SELECT *
FROM Products
ORDER BY price ASC
LIMIT 1 --(최솟값 1개 출력)


SELECT *
FROM Products
ORDER BY price DESC
LIMIT 3




--[해커랭크_Higher Than 75 Marks 문제풀이]

SELECT *
FROM students
WHERE marks > 75
ORDER BY ~, id 
--ㄴ 두 번째 정렬 기준이 있을 때는 콤마 , 



/*
MySQL 문자열 자르기

- LEFT(컬럼명 또는 문자열, 문자열의 길이)
  예: SELECT LEFT("20140323", 4) => 2014

- RIGHT(컬럼명 또는 문자열, 문자열의 길이)
  예: SELECT RIGHT("20140323", 4) => 0323

- SUBSTRING(컬럼명 또는 문자열, 시작 위치, 길이)
  = SUBSTR()
  예: SUBSTR("20140323", 1, 4) => 2014
  예: SUBSTR("20140323", 5) => 0323 시작 위치부터 끝까지
*/
  

/*
소수점처리

- CEIL() 올림
  예: SELECT CEIL(5.5) => 6

- FLOOR() 내림
  예: SELECT FLOOR(5.5) => 5

- ROUND() 반올림
  예: ROUND(5.5569901, 4) => 5.5569 넷째자리까지
*/

